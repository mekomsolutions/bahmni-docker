# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Start Terraform infrastructure
        run: |
          #!/usr/bin/env bash
          WORKDIR=$PWD/workdir
          REPO_DIR=$PWD
          BUILD_DIR=$REPO_DIR/build

          cd $BUILD_DIR
          export TF_VAR_aws_api_key='${{ secrets.AWS_API_KEY_1 }}'
          export TF_VAR_aws_api_secret='${{ secrets.AWS_API_SECRET_1 }}'

          wget https://releases.hashicorp.com/terraform/0.13.0/terraform_0.13.0_linux_amd64.zip -O terraform.zip
          unzip terraform.zip
          chmod +x ./terraform
          ./terraform version
          ./terraform init
          ./terraform fmt
          ./terraform validate
          ./terraform apply -auto-approve

          ip=$(cat $PWD/terraform.tfstate | jq -r .outputs.arm_builder_stats.value.ip)
          echo "‚òëÔ∏è AWS instance started. IP=$ip"
          echo "INSTANCE_IP=$ip" >> $GITHUB_ENV
          exit 0

      - name: Parse services
        run: |
          #!/usr/bin/env bash
          WORKDIR=$PWD/workdir
          REPO_DIR=$PWD
          BUILD_DIR=$REPO_DIR/build

          # Read and save the list of services to build
          services=""
          folders=`ls -d */`
          for folder in $folders
          do
            service=`echo $folder | sed -e 's/^..\///' -e 's/.$//'`
            case $service in
                sqls|readme|properties)
                  ;;
                *)
                  services=$service","$services
                  ;;
            esac
          done
          echo "SERVICES=$services" >> $GITHUB_ENV

      - name: Setup SSH connection and copy files
        run: |
          #!/usr/bin/env bash
          WORKDIR=$PWD/workdir
          REPO_DIR=$PWD
          BUILD_DIR=$REPO_DIR/build

          cd $BUILD_DIR

          echo "‚öôÔ∏è Set AWS AMI private key."
          AWS_AMI_PRIVATE_KEY_FILE=$(mktemp)
          echo "${{ secrets.AWS_AMI_PRIVATE_KEY }}" > $AWS_AMI_PRIVATE_KEY_FILE
          chmod 600 $AWS_AMI_PRIVATE_KEY_FILE

          server="ubuntu@$INSTANCE_IP"

          echo "Wait for 30s..."
          sleep 30s

          # Send the project to remote
          echo "‚öôÔ∏è Copy files to remote"

          ssh -o StrictHostKeyChecking=no -i $AWS_AMI_PRIVATE_KEY_FILE -p 22 $server "mkdir -p /home/ubuntu/bahmni-docker"
          rsync -av -e "ssh -o StrictHostKeyChecking=no -i $AWS_AMI_PRIVATE_KEY_FILE -p 22" ../ $server:/home/ubuntu/bahmni-docker/ --exclude .git --exclude build

      - name: Build images on remote instance
        run: |
          #!/usr/bin/env bash
          WORKDIR=$PWD/workdir
          REPO_DIR=$PWD
          BUILD_DIR=$REPO_DIR/build
          services=$SERVICES

          echo "üìë Services to build: "
          echo $services

          echo "‚öôÔ∏è Set the Revision and CPU architecture:"
          rm -f vars.env
          echo "REVISION=$(git rev-parse --short HEAD)" >> vars.env
          echo "CPU_ARCH=arm64" >> vars.env
          cat vars.env

          # Set the Docker creds
          echo "DOCKER_USERNAME=mekomsolutions" >> $REPO_DIR/vars.env
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_HUB_REGISTRY_PASSWORD }}" >> vars.env

          echo "‚öôÔ∏è Set AWS AMI private key."
          AWS_AMI_PRIVATE_KEY_FILE=$(mktemp)
          echo "${{ secrets.AWS_AMI_PRIVATE_KEY }}" > $AWS_AMI_PRIVATE_KEY_FILE
          chmod 600 $AWS_AMI_PRIVATE_KEY_FILE

          echo "‚öôÔ∏è Run Docker build commands on remote."
          ssh -t -o StrictHostKeyChecking=no -i $AWS_AMI_PRIVATE_KEY_FILE -p 22 ubuntu@$INSTANCE_IP /bin/bash -x << EOF
            cd bahmni-docker/
            services=$services
            echo "‚öôÔ∏è Will build the following list of services:" $services
            for service in \${services//,/ }
            do
                echo "‚öôÔ∏è Building '\${service}' image and tag it as '$DOCKER_USERNAME/\${service}:\${REVISION}_${CPU_ARCH}'"
                docker build \${service}/ -t $DOCKER_USERNAME/\${service}:\${REVISION}_${CPU_ARCH}
            done
          EOF

      - name: Destroy Terraform infrastructure
        if: always()
        run: |
          #!/usr/bin/env bash
          WORKDIR=$PWD/workdir
          REPO_DIR=$PWD
          BUILD_DIR=$REPO_DIR/build

          cd $BUILD_DIR
          export TF_VAR_aws_api_key='${{ secrets.AWS_API_KEY_1 }}'
          export TF_VAR_aws_api_secret='${{ secrets.AWS_API_SECRET_1 }}'

          ./terraform destroy -auto-approve

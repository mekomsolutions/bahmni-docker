name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Start Terraform infrastructure
        run: |
          export TF_VAR_aws_api_key='${{ secrets.AWS_API_KEY_1 }}'
          export TF_VAR_aws_api_secret='${{ secrets.AWS_API_SECRET_1 }}'
          ./build/scripts/start_terraform.sh

      - name: Debug
        run: |
          #!/usr/bin/env bash
          echo "$amd64"

      - name: Parse services
        run: |
          #!/usr/bin/env bash
          WORKDIR=$PWD/workdir
          REPO_DIR=$PWD
          BUILD_DIR=$REPO_DIR/build

          # Read and save the list of services to build
          services=""
          folders=`ls -d */`
          for folder in $folders
          do
            service=`echo $folder | sed -e 's/^..\///' -e 's/.$//'`
            case $service in
                sqls|readme|properties)
                  ;;
                *)
                  services=$service","$services
                  ;;
            esac
          done
          echo "SERVICES=$services" >> $GITHUB_ENV

      - name: Setup SSH connection and copy files
        run: |
          #!/usr/bin/env bash
          WORKDIR=$PWD/workdir
          REPO_DIR=$PWD
          BUILD_DIR=$REPO_DIR/build

          cd $BUILD_DIR

          echo "‚öôÔ∏è Set AWS AMI private key."
          AWS_AMI_PRIVATE_KEY_FILE=$(mktemp)
          echo "${{ secrets.AWS_AMI_PRIVATE_KEY }}" > $AWS_AMI_PRIVATE_KEY_FILE
          chmod 600 $AWS_AMI_PRIVATE_KEY_FILE

          echo "Wait for 30s..."
          sleep 30s

          echo "‚öôÔ∏è Copy files to remotes"
          IPs=$arm64 $amd64
          for ip in $IPs
          do
            echo "Remote: $ip"
            ssh -o StrictHostKeyChecking=no -i $AWS_AMI_PRIVATE_KEY_FILE -p 22 ubuntu@$ip "mkdir -p /home/ubuntu/bahmni-docker"
            rsync -av -e "ssh -o StrictHostKeyChecking=no -i $AWS_AMI_PRIVATE_KEY_FILE -p 22" ../ ubuntu@$ip:/home/ubuntu/bahmni-docker/ --exclude .git --exclude build
          done

      - name: Build images on remote instances
        if: ${{ true }}
        run: |
          #!/usr/bin/env bash
          WORKDIR=$PWD/workdir
          REPO_DIR=$PWD
          BUILD_DIR=$REPO_DIR/build
          services=$SERVICES

          echo "üìë Services to build: "
          echo $services

          echo "‚öôÔ∏è Set the Revision and CPU architecture:"
          REVISION=$(git rev-parse --short HEAD)
          CPU_ARCH=arm64

          # Set the Docker creds
          DOCKER_USERNAME=mekomsolutions
          DOCKER_PASSWORD=${{ secrets.DOCKER_HUB_REGISTRY_PASSWORD }}

          echo "‚öôÔ∏è Set AWS AMI private key."
          AWS_AMI_PRIVATE_KEY_FILE=$(mktemp)
          echo "${{ secrets.AWS_AMI_PRIVATE_KEY }}" > $AWS_AMI_PRIVATE_KEY_FILE
          chmod 600 $AWS_AMI_PRIVATE_KEY_FILE

          echo "‚öôÔ∏è Run Docker build commands on remotes..."
          IPs=$arm64 $amd64
          for ip in $IPs
          do
            echo "Remote: $ip"
            ssh -t -o StrictHostKeyChecking=no -i $AWS_AMI_PRIVATE_KEY_FILE -p 22 ubuntu@$ip /bin/bash -x << EOF
              cd bahmni-docker/
              services=$services
              echo "‚öôÔ∏è Will build the following list of services:" $services
              for service in \${services//,/ }
              do
                  echo "‚öôÔ∏è Build '\${service}' image and tag it as '$DOCKER_USERNAME/\${service}:${REVISION}_$arch'..."
                  sudo docker build \${service}/ -t $DOCKER_USERNAME/\${service}:${REVISION}_${CPU_ARCH}
              done
            EOF
          done

      - name: Deploy images
        run: |
          #!/usr/bin/env bash
          WORKDIR=$PWD/workdir
          REPO_DIR=$PWD
          BUILD_DIR=$REPO_DIR/build
          services=$SERVICES

          echo "üìë Services to push: "
          echo $services

          echo "‚öôÔ∏è Set the Revision and CPU architecture:"
          REVISION=$(git rev-parse --short HEAD)

          # Set the Docker creds
          DOCKER_USERNAME=mekomsolutions
          DOCKER_PASSWORD=${{ secrets.DOCKER_HUB_REGISTRY_PASSWORD }}

          echo "‚öôÔ∏è Set AWS AMI private key."
          AWS_AMI_PRIVATE_KEY_FILE=$(mktemp)
          echo "${{ secrets.AWS_AMI_PRIVATE_KEY }}" > $AWS_AMI_PRIVATE_KEY_FILE
          chmod 600 $AWS_AMI_PRIVATE_KEY_FILE

          echo "‚öôÔ∏è Run Docker build commands on remotes..."
          archs=arm64 amd64
          for arch in archs
          do
            ip=${!arch}
            echo "Remote: $arch: $ip"

            echo "üîë Log in Docker Hub"
            ssh -t -o StrictHostKeyChecking=no -i $AWS_AMI_PRIVATE_KEY_FILE -p 22 ubuntu@$ip /bin/bash -x << EOF
              sudo docker login -p $DOCKER_PASSWORD -u $DOCKER_USERNAME
            EOF

            echo "‚öôÔ∏è Run Docker push commands on remote."
            ssh -t -o StrictHostKeyChecking=no -i $AWS_AMI_PRIVATE_KEY_FILE -p 22 ubuntu@$ip /bin/bash -x << EOF
              cd bahmni-docker/
              services=$services
              echo "‚öôÔ∏è Will push the following list of services:" $services
              for service in \${services//,/ }
              do
                  echo "‚öôÔ∏è Pushing '$DOCKER_USERNAME/\${service}:${REVISION}_$arch'..."
                  sudo docker push $DOCKER_USERNAME/\${service}:${REVISION}_$arch
                  echo "‚öôÔ∏è Create manifest '$DOCKER_USERNAME/\${service}:${REVISION}_$arch'..."
                  docker manifest create $DOCKER_USERNAME/${service}:$(git rev-parse --short HEAD) --amend $DOCKER_USERNAME/${service}:$(git rev-parse --short HEAD)_arm64 --amend $DOCKER_USERNAME/${service}:$(git rev-parse --short HEAD)_amd64
                  docker manifest push $DOCKER_USERNAME/${service}:$(git rev-parse --short HEAD)
                  docker manifest push $DOCKER_USERNAME/${service}:latest
              done
            EOF

          done

      - name: Destroy Terraform infrastructure
        if: always()
        run: |
          #!/usr/bin/env bash
          WORKDIR=$PWD/workdir
          REPO_DIR=$PWD
          BUILD_DIR=$REPO_DIR/build

          cd $BUILD_DIR
          export TF_VAR_aws_api_key='${{ secrets.AWS_API_KEY_1 }}'
          export TF_VAR_aws_api_secret='${{ secrets.AWS_API_SECRET_1 }}'

          ./terraform destroy -auto-approve
